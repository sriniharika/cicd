/*
 Library declaration
  Notes:
  identifier includes the version of the library (git tag / branch)
  remote includes the repository git url
  credentialsId needs to be of the type SSH key in Jenkins
  _ at the end of the declaration loads the whole library
  This section always runs in the master jenkins.
*/
try {
  library(
    identifier: 'jsl-jenkins-shared-library@release/20210902',
    retriever: modernSCM(
      [
        $class: 'GitSCMSource',
        remote: "https://github.com/CenturyLink/jsl-jenkins-shared-library.git",
        credentialsId: 'GITHUB_APP_CREDENTIALS',
        extensions: [[$class: 'WipeWorkspace']]
      ]
    )
  ) _
} catch (Exception Ex) {
  library(
    identifier: 'jsl-jenkins-shared-library@release/20210902',
    retriever: modernSCM(
      [
        $class: 'GitSCMSource',
        remote: "git@github.com:CenturyLink/jsl-jenkins-shared-library.git",
        credentialsId: 'SCMAUTO_SSH_DEVOPS_PIPELINE',
        extensions: [[$class: 'WipeWorkspace']]
      ]
    )
  ) _
}

pipeline {

    environment {

      /*
        Credentials:
        GITHUB_TOKEN_CREDENTIALS github token, jenkins user password credential
        GITHUB_SSH_CREDENTIALS github ssh private key, jenkins private key credential.
        DOCKER_CREDENTIALS Docker access info, jenkins secret file credential with environment variables to export
        KUBE_CREDENTIALS Kubernetes access info, jenkins secret file credential with environment variables to export
        AMAZON_CREDENTIALS AWS access info, jenkins secret file credential with environment variables to export
        SONARQUBE_CREDENTIALS Sonarqube access info, jenkins secret file credential with environment variables to export
        GCP_CREDENTIALS GCP access info, jenkins secret file credential with environment variables to export
        JIRA_CREDENTIALS Jira access info, jenkins secret file credential with environment variables to export
        MSTEAMS_CREADENTIALS MS Teams access info, jenkins secret file credential with environment variables to export
      */
      //SCMAUTO_GITHUB uses token, GITHUB_APP_CREDENTIALS uses githup app so please use appropriate value based on what you uses in Jenkins multibranch configuration.
      GITHUB_TOKEN_CREDENTIALS = 'GITHUB_APP_CREDENTIALS'
//      GITHUB_TOKEN_CREDENTIALS = 'SCMAUTO_GITHUB'
      GITHUB_SSH_CREDENTIALS = 'SCMAUTO_SSH_DEVOPS_PIPELINE'
      DOCKER_CREDENTIALS = 'nexus-secrets'
      SONARQUBE_CREDENTIALS = 'sonar-secrets'
      QUALITY_GATE_CREDENTIALS = 'qualitygate-secret'
      JIRA_CREDENTIALS = 'jira-credentials'
      PROJECT_MAL = "ETFI"
      MSTEAMS_CREDENTIALS = 'teams-secret'

      //Deployment control credentialsId
      AUTHORIZED_USERS = 'authorized_users'
      DEPLOY_AUTH_TOKEN = 'deploy_auth_token'

      // Custom project variables
      COMMIT_ID = GIT_COMMIT.substring(0,7).trim().toLowerCase()
      PULL_REQUEST="pr-${env.CHANGE_ID}"
      PROJECT_NAME = 'etfi-dev-tcop-others'
      RELEASE_DATE = new Date().format("yyyyMMdd")

      //App Specific

      // ETS Integration
      ETS_URL = 'http://vlodjumpts00.dev.qintra.com:8085'
      ETS_APPLICATION_NAME = "tcopgp"
      ETS_VERSION = '7.4.0.18' // to be made dynamic
    }

    /*parameters {
      //      https://www.jenkins.io/doc/book/pipeline/syntax/#parameters
    }*/

    /*
    https://www.jenkins.io/doc/book/pipeline/syntax/#agent
    Add agent sections in stages/stage if needed.
    */
    agent {
      label 'Docker-enabled'
    }

    options {
      /*
      https://www.jenkins.io/doc/book/pipeline/syntax/#options
      */
      timestamps ()
      timeout(time: 1, unit: 'HOURS')
      buildDiscarder(logRotator(numToKeepStr:'10', daysToKeepStr: '30'))
      preserveStashes(buildCount: 10)
      disableConcurrentBuilds()
    }

    /*
    https://www.jenkins.io/doc/book/pipeline/syntax/#triggers
    */
    triggers {
      issueCommentTrigger('.*test this please.*')
    }

    stages {
      stage('Authorize - Prod only') {
        when {
          expression { BRANCH_NAME ==~ /(production)/ }
        }
        steps {
          script {
            jslDeploymentControlKnob()
          }
        }
      }

      stage('Static Code Analysis') {
        parallel {
          stage('Linting') {
            agent {
                dockerfile {
                    filename 'Dockerfile'
                    dir 'cicd/docker/ant'
                    label 'Docker-enabled'
                }
            }
            steps {
              script {
                // /* Contract validation gate */
                jslBuildAnt('checkstyle')
                archiveArtifacts artifacts: 'checkstyle*.xml', fingerprint: true
              }
            }
          }
          stage('DevSecOps'){
            steps {
              script {
                /* Contract validation gate */
                jslGitHubSecurityAlert()
              }
            }
          }
        }
      }

      stage('Build') {
        agent {
            dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/ant'
                label 'Docker-enabled'
            }
        }
        steps {
          script {
            if(env.CHANGE_ID != null){
              ETS_VERSION = "${env.ETS_VERSION}-${PULL_REQUEST}-${BUILD_NUMBER}"
            }
            jslBuildAnt("Which-deploy -Dbuild.number=${ETS_VERSION}")
            stash name: "TARGET", includes: "build/**,dist/**"          
          }
        }
      }

      stage('Push to Nexus') {
        steps {
          script {
            def path = "${env.ETS_APPLICATION_NAME}/${ETS_VERSION}"
            def artifact = "${env.ETS_APPLICATION_NAME}.${ETS_VERSION}.tar"
            def repo='devOps_deploy'
            unstash name: "TARGET"
            sh "cp dist/tc.dist/tar/${env.ETS_APPLICATION_NAME}.${ETS_VERSION}.tar .";
            jslDeploymentContractValidationWrite(BRANCH_NAME)
            env.ETS_NEXUS_URL = jslUploadFileToNexus(artifact, path, repo)
            echo('Generating SOECheckerLib report with a placeholder')
            def report_name = jslETSGenerateSOECheckerLibReport('etfitest1', ETS_VERSION, 'Test1', 'nkagane')
            jslUploadFileToNexus(report_name, path, repo)
          }
        }
      }

      stage('Test') {
        stages {
          stage('Unit Tests') {
            agent {
                dockerfile {
                    filename 'Dockerfile'
                    dir 'cicd/docker/ant'
                    label 'Docker-enabled'
                }
            }
            steps {
              script {
                unstash name: "TARGET"
                // PLACEHOLDER: Remember to include your UNIT TESTS here!
                //jslBuildAnt('test || echo tests failed or missing task!')
                sh script: """
                  echo '<?xml version="1.0" encoding="UTF-8"?>
                        <testsuites name="Mocha Tests" time="0" tests="1" failures="0">
                        <testsuite name="Root Suite" timestamp="2020-08-31T13:32:04" tests="0" file="hook_test.cs" failures="0" time="0">
                        </testsuite>
                        <testsuite name="Placeholder test" timestamp="2020-08-31T13:32:04" tests="1" failures="0" time="0">
                        <testcase name="Placeholder success test" time="5.074" classname="Wait for profile">
                        </testcase>
                        </testsuite>
                        </testsuites>' > hook_unit_tests_results.xml
                """, label: "Generating successful test"
                /* Contract validation gate */
                jslPublishTestResults('hook_unit_tests_results.xml')
                stash name: "TESTS", includes: "hook_unit_tests_results.xml"              
              }
            }
          }
          stage('Coverage'){
            steps {
              script {
                unstash name: "TARGET"
                unstash name: "TESTS"
                /* Contract validation gate */               
                // /* Sonar get executed only in Master Branch */
                jslQualityGateCodeCoverage('./cicd/conf/sonarqube/sonar-project.properties')
              }
            }
          }
          stage('Sonarqube'){
            agent {
                dockerfile {
                    filename 'Dockerfile'
                    dir 'cicd/docker/sonarqube'
                    label 'Docker-enabled'
                }
            }
            steps {
              script {
                unstash name: "TARGET"
                unstash name: "TESTS"
                /* Contract validation gate */
                jslSonarQubeStaticAnalysis('./cicd/conf/sonarqube/sonar-project.properties')
              }
            }
          }

          stage('Quality Gate'){
            agent {
                dockerfile {
                    filename 'Dockerfile'
                    dir 'cicd/docker/sonarqube'
                    label 'Docker-enabled'
                }
            }
            steps {
              script {
                /* Contract validation gate */
                jslQualityGate()
              }
            }
          }
        }
      }

      stage('Deploy') {

        steps {
          script {
            unstash name: "TARGET"
            if(env.CHANGE_ID == null){
              env.ETS_ENVIRONMENT = jslETSGetEnvironment()
              env.ETS_RELEASE_TARGET = jslETSGetReleaseTarget()
              if(env.BRANCH_NAME!='production'){
                echo('Generating ETS ticket')
                def now = new Date()
                def requested_date = now.format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone('UTC'))
                def ticket_number = jslETSCreateDeployRequest(ETS_VERSION, env.ETS_ENVIRONMENT, env.ETS_RELEASE_TARGET, 'cicd/payloads/ets/ets.json', requested_date, env.ETS_NEXUS_URL)
                echo ('Ticket Result: ' + ticket_number)
              }
              else if(env.BRANCH_NAME=='production'){
                // Please prod deploy steps here
              }
            }
            else {
              sh 'ssh -o StrictHostKeyChecking=no etfiop@z2omt53n.dev.qintra.com hostname'
              sh "scp dist/tc.dist/tar/${env.ETS_APPLICATION_NAME}.${ETS_VERSION}.tar etfiop@z2omt53n.dev.qintra.com:/proj/etfi/stage/itapp/dev/tcopgp/"
              sh "ssh -o StrictHostKeyChecking=no etfiop@z2omt53n.dev.qintra.com 'cd /proj/etfi/prod/itapp/dev/tcopgp/; ./deployApp.sh tcopgp ${ETS_VERSION}'"
              sh 'ssh -o StrictHostKeyChecking=no etfiop@z2omt53n.dev.qintra.com "cd /proj/etfi/prod/itapp/dev/tcopgp/current/; ./stopApp.sh both"'
              sh 'ssh -o StrictHostKeyChecking=no etfiop@z2omt53n.dev.qintra.com "cd /proj/etfi/prod/itapp/dev/tcopgp/current/; ./startApp.sh both"'
            }
          }
        }
      }
       

      stage('E2E Testing') {
        agent {
            dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/ant'
                label 'Docker-enabled'
            }
        }
        steps {
          script {
            println ('Placeholder for E2E tests')
          }
        }
      }

      stage('Adoption Stats') {
        agent {
            dockerfile {
                filename 'Dockerfile'
                dir 'cicd/docker/jira'
                label 'Docker-enabled'
            }
         }
         steps {
         // unstash name: "TESTS"
          // /* Contract validation gate */
          jslAdoptionMain('hook_*.xml')
          println ('Adoption Stats')
         }
      }
    }

    post {
      /*
      https://www.jenkins.io/doc/book/pipeline/syntax/#post
      Always post somewhere the watermark:
	- md5sum of Jenkinsfile
	- Output of the Jenkinsfile checker output
      */
      success {
         jslNotification('success')
         cleanWs()
      }
      failure {
        jslNotification('failure')
        cleanWs()
      }
      unstable {
        jslNotification('unstable')
        cleanWs()
      }
      
    }
}